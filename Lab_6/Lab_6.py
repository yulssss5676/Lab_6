
def replace_at_odd_positions():
    # Зчитування списку від користувача
    A = list(map(int, input('Введіть список цілих чисел через пробіл: ').split()))
    print('Початковий список:', A)
    
    # Зчитування нового елемента для заміни
    new_element = int(input('Введіть новий елемент для заміни на непарних позиціях: '))
    
    # Заміна непарних елементів 
    for i in range(1, len(A), 2):  # Починаючи з індексу 1 і з кроком 2 (непарні індекси)
        A[i] = new_element
    
    print('Модифікований список:', A)
    return A

replace_at_odd_positions()

////////////////////////////////////////////////////////////////////////////////////////

def swap_max_min():
    # Зчитування списку від користувача
    A = list(map(int, input('Введіть список цілих чисел через пробіл: ').split()))
    print('Початковий список:', A)
    
    # Пошук індексів максимального і мінімального елементів
    max_index = A.index(max(A))
    min_index = A.index(min(A))
    
    # Обмін місцями максимального і мінімального елементів
    A[max_index], A[min_index] = A[min_index], A[max_index]
    
    print('Список після обміну максимального і мінімального елементів:', A)
    return A

swap_max_min()

////////////////////////////////////////////////////////////////////////////////////////

def first_occurrences():
    # Зчитування тексту від користувача
    text = input("Введіть слово з латинських літер: ")
    
    # Ініціалізація порожньої множини для відстеження унікальних літер
    seen = set()
    result = []
    
    # Обробка
    for char in text:
        if char not in seen:
            seen.add(char)
            result.append(char)
    
    # Друк множини без повторів
    print("Перше входження літер у тексті в порядку їх появи:", ''.join(result))
    print("Множина цих літер у порядку їх появи:", '{' + ', '.join(result) + '}')

first_occurrences()

